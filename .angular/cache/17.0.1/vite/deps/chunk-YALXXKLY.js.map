{
  "version": 3,
  "sources": ["../../../../../../../packages/common/http/src/backend.ts", "../../../../../../../packages/common/http/src/headers.ts", "../../../../../../../packages/common/http/src/params.ts", "../../../../../../../packages/common/http/src/context.ts", "../../../../../../../packages/common/http/src/request.ts", "../../../../../../../packages/common/http/src/response.ts", "../../../../../../../packages/common/http/src/client.ts", "../../../../../../../packages/common/http/src/fetch.ts", "../../../../../../../packages/common/http/src/interceptor.ts", "../../../../../../../packages/common/http/src/jsonp.ts", "../../../../../../../packages/common/http/src/xhr.ts", "../../../../../../../packages/common/http/src/xsrf.ts", "../../../../../../../packages/common/http/src/provider.ts", "../../../../../../../packages/common/http/src/module.ts", "../../../../../../../packages/common/http/src/transfer_cache.ts", "../../../../../../../packages/common/http/index.ts", "../../../../../../../packages/common/http/http.ts", "../../../../../../../packages/platform-browser/src/browser/generic_browser_adapter.ts", "../../../../../../../packages/platform-browser/src/browser/browser_adapter.ts", "../../../../../../../packages/platform-browser/src/browser/testability.ts", "../../../../../../../packages/platform-browser/src/browser/xhr.ts", "../../../../../../../packages/platform-browser/src/dom/events/event_manager.ts", "../../../../../../../packages/platform-browser/src/dom/shared_styles_host.ts", "../../../../../../../packages/platform-browser/src/dom/dom_renderer.ts", "../../../../../../../packages/platform-browser/src/dom/events/dom_events.ts", "../../../../../../../packages/platform-browser/src/dom/events/key_events.ts", "../../../../../../../packages/platform-browser/src/browser.ts", "../../../../../../../packages/platform-browser/src/browser/meta.ts", "../../../../../../../packages/platform-browser/src/browser/title.ts", "../../../../../../../packages/platform-browser/src/dom/util.ts", "../../../../../../../packages/platform-browser/src/browser/tools/browser.ts", "../../../../../../../packages/platform-browser/src/browser/tools/common_tools.ts", "../../../../../../../packages/platform-browser/src/browser/tools/tools.ts", "../../../../../../../packages/platform-browser/src/dom/debug/by.ts", "../../../../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts", "../../../../../../../packages/platform-browser/src/security/dom_sanitization_service.ts", "../../../../../../../packages/platform-browser/src/hydration.ts", "../../../../../../../packages/platform-browser/src/version.ts", "../../../../../../../packages/platform-browser/src/platform-browser.ts", "../../../../../../../packages/platform-browser/public_api.ts", "../../../../../../../packages/platform-browser/index.ts", "../../../../../../../packages/platform-browser/platform-browser.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers!: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders|Function|null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(headers?: string|{[name: string]: string | number | (string | number)[]}|Headers) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key)!.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map<string, string[]>();\n      headers.forEach((values: string, name: string) => {\n        this.setHeaderEntries(name, values);\n      });\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map<string, string[]>();\n        Object.entries(headers).forEach(([name, values]) => {\n          this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  private setHeaderEntries(name: string, values: any) {\n    const headerValues =\n        (Array.isArray(values) ? values : [values]).map((value) => value.toString());\n    const key = name.toLowerCase();\n    this.headers.set(key, headerValues);\n    this.maybeSetNormalizedName(name, key);\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key)!, this.headers.get(key)!));\n  }\n}\n\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers: Record<string, unknown>|Headers):\n    asserts headers is Record<string, string|string[]|number|number[]> {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(\n          `Unexpected value of the \\`${key}\\` header provided. ` +\n          `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string {\n    return standardEncoding(key);\n  }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string {\n    return standardEncoding(value);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) {\n    return decodeURIComponent(value);\n  }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS: {[x: string]: string} = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/',\n};\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v).replace(\n      STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\n\nfunction valueToString(value: string|number|boolean): string {\n  return `${value}`;\n}\n\ninterface Update {\n  param: string;\n  value?: string|number|boolean;\n  op: 'a'|'d'|'s';\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>};\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map!.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map!.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map!.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map!.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map!.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'a'});\n  }\n\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>}):\n      HttpParams {\n    const updates: Update[] = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({param, value: _value, op: 'a'});\n        });\n      } else {\n        updates.push({param, value: value as (string | number | boolean), op: 'a'});\n      }\n    });\n    return this.clone(updates);\n  }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 's'});\n  }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param: string, value?: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'd'});\n  }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          // `a: ['1']` produces `'a=1'`\n          // `b: []` produces `''`\n          // `c: ['1', '2']` produces `'c=1&c=2'`\n          return this.map!.get(key)!.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        // filter out empty values because `b: []` produces `''`\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n        .filter(param => param !== '')\n        .join('&');\n  }\n\n  private clone(update: Update|Update[]): HttpParams {\n    const clone = new HttpParams({encoder: this.encoder} as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\n      this.updates!.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map!.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value!));\n            this.map!.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map!.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map!.set(update.param, base);\n              } else {\n                this.map!.delete(update.param);\n              }\n            } else {\n              this.map!.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nexport class HttpContextToken<T> {\n  constructor(public readonly defaultValue: () => T) {}\n}\n\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nexport class HttpContext {\n  private readonly map = new Map<HttpContextToken<unknown>, unknown>();\n\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set<T>(token: HttpContextToken<T>, value: T): HttpContext {\n    this.map.set(token, value);\n    return this;\n  }\n\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get<T>(token: HttpContextToken<T>): T {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token) as T;\n  }\n\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token: HttpContextToken<unknown>): HttpContext {\n    this.map.delete(token);\n    return this;\n  }\n\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n  has(token: HttpContextToken<unknown>): boolean {\n    return this.map.has(token);\n  }\n\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys(): IterableIterator<HttpContextToken<unknown>> {\n    return this.map.keys();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  context?: HttpContext;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n  transferCache?: {includeHeaders?: string[]}|boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value: any): value is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T|null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers!: HttpHeaders;\n\n  /**\n   * Shared and mutable context that can be used by interceptors\n   */\n  readonly context!: HttpContext;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   *\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\n   *\n   * ```\n   * new HttpParams({fromString: 'angular=awesome'})\n   * ```\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params!: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  /**\n   * The HttpTransferCache option for the request\n   */\n  readonly transferCache?: {includeHeaders?: string[]}|boolean;\n\n  constructor(method: 'GET'|'HEAD', url: string, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    /**\n     * This property accepts either a boolean to enable/disable transferring cache for eligible\n     * requests performed using `HttpClient`, or an object, which allows to configure cache\n     * parameters, such as which headers should be included (no headers are included by default).\n     *\n     * Setting this property will override the options passed to `provideClientHydration()` for this\n     * particular request\n     */\n    transferCache?: {includeHeaders?: string[]}|boolean\n  });\n  constructor(method: 'DELETE'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: 'POST', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    /**\n     * This property accepts either a boolean to enable/disable transferring cache for eligible\n     * requests performed using `HttpClient`, or an object, which allows to configure cache\n     * parameters, such as which headers should be included (no headers are included by default).\n     *\n     * Setting this property will override the options passed to `provideClientHydration()` for this\n     * particular request\n     */\n    transferCache?: {includeHeaders?: string[]}|boolean\n  });\n  constructor(method: 'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    /**\n     * This property accepts either a boolean to enable/disable transferring cache for eligible\n     * requests performed using `HttpClient`, or an object, which allows to configure cache\n     * parameters, such as which headers should be included (no headers are included by default).\n     *\n     * Setting this property will override the options passed to `provideClientHydration()` for this\n     * particular request\n     */\n    transferCache?: {includeHeaders?: string[]}|boolean\n  });\n  constructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n        transferCache?: {includeHeaders?: string[]}|boolean\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n        transferCache?: {includeHeaders?: string[]}|boolean\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = (third !== undefined) ? third as T : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n\n      // We do want to assign transferCache even if it's falsy (false is valid value)\n      this.transferCache = options.transferCache;\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no context have been passed in, construct a new HttpContext instance.\n    if (!this.context) {\n      this.context = new HttpContext();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer|Blob|FormData|URLSearchParams|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        typeof this.body === 'boolean') {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, update.setHeaders![name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, update.setParams![param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n    });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * Note: The `FetchBackend` doesn't support progress report on uploads.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n    HttpSentEvent|HttpHeaderResponse|HttpResponse<T>|HttpProgressEvent|HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type!: HttpEventType.Response|HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = HttpStatusCode.Ok, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  override readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  override readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any|null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  override readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n          init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport const enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n\n  Ok = 200,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = 204,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n    options: {\n      headers?: HttpHeaders|{[header: string]: string | string[]},\n      context?: HttpContext,\n      observe?: 'body'|'events'|'response',\n      params?: HttpParams|\n            {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n      reportProgress?: boolean,\n      responseType?: 'arraybuffer'|'blob'|'json'|'text',\n      withCredentials?: boolean,\n      transferCache?: {includeHeaders?: string[]}|boolean,\n    },\n    body: T|null): any {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n    transferCache: options.transferCache,\n  };\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/understanding-communicating-with-http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n   * an `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n   * the request.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n          observe: 'events',\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns\n   * the full `HttpResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse` as a JavaScript object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the requested response, with body of type `any`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    observe?: 'body'|'events'|'response',\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  } = {}): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders|undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams|undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({fromObject: options.params} as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url!, (options.body !== undefined ? options.body : null), {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n        transferCache: options.transferCache,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        of(req).pipe(concatMap((req: HttpRequest<any>) => this.handler.handle(req)));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>events$.pipe(\n        filter((event: HttpEvent<any>) => event instanceof HttpResponse));\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<ArrayBuffer>;\n\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n   * `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n   * type `Object`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | (string | number | boolean)[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JavaScript object and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n   */\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  } = {}): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n   * response in an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JavaScript object.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n   */\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  } = {}): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n   * string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the requested type.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  } = {}): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request with the response\n   * body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n   */\n  options<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the\n   * response body as `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a\n   * response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `PATCH` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  patch(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON and returns the\n   * full `HttpResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  post(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    transferCache?: {includeHeaders?: string[]}|boolean\n  } = {}): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n   * of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n   * returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON\n   * and returns an observable of JavaScript object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response as a JavaScript object.\n   */\n  put(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type\n   * and returns an observable of the requested type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the requested type.\n   */\n  put<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Injectable, NgZone} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpResponse, HttpStatusCode} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\nconst REQUEST_URL_HEADER = `X-Request-URL`;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl(response: Response): string|null {\n  if (response.url) {\n    return response.url;\n  }\n  // stored as lowercase in the map\n  const xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();\n  return response.headers.get(xRequestUrl);\n}\n\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n */\n@Injectable()\nexport class FetchBackend implements HttpBackend {\n  // We need to bind the native fetch to its context or it will throw an \"illegal invocation\"\n  private readonly fetchImpl =\n      inject(FetchFactory, {optional: true})?.fetch ?? fetch.bind(globalThis);\n  private readonly ngZone = inject(NgZone);\n\n  handle(request: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable(observer => {\n      const aborter = new AbortController();\n      this.doRequest(request, aborter.signal, observer)\n          .then(noop, error => observer.error(new HttpErrorResponse({error})));\n      return () => aborter.abort();\n    });\n  }\n\n  private async doRequest(\n      request: HttpRequest<any>, signal: AbortSignal,\n      observer: Observer<HttpEvent<any>>): Promise<void> {\n    const init = this.createRequestInit(request);\n    let response;\n\n    try {\n      const fetchPromise = this.fetchImpl(request.urlWithParams, {signal, ...init});\n\n      // Make sure Zone.js doesn't trigger false-positive unhandled promise\n      // error in case the Promise is rejected synchronously. See function\n      // description for additional information.\n      silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n\n      // Send the `Sent` event before awaiting the response.\n      observer.next({type: HttpEventType.Sent});\n\n      response = await fetchPromise;\n    } catch (error: any) {\n      observer.error(new HttpErrorResponse({\n        error,\n        status: error.status ?? 0,\n        statusText: error.statusText,\n        url: request.urlWithParams,\n        headers: error.headers,\n      }));\n      return;\n    }\n\n    const headers = new HttpHeaders(response.headers);\n    const statusText = response.statusText;\n    const url = getResponseUrl(response) ?? request.urlWithParams;\n\n    let status = response.status;\n    let body: string|ArrayBuffer|Blob|object|null = null;\n\n    if (request.reportProgress) {\n      observer.next(new HttpHeaderResponse({headers, status, statusText, url}));\n    }\n\n    if (response.body) {\n      // Read Progress\n      const contentLength = response.headers.get('content-length');\n      const chunks: Uint8Array[] = [];\n      const reader = response.body.getReader();\n      let receivedLength = 0;\n\n      let decoder: TextDecoder;\n      let partialText: string|undefined;\n\n      // We have to check whether the Zone is defined in the global scope because this may be called\n      // when the zone is nooped.\n      const reqZone = typeof Zone !== 'undefined' && Zone.current;\n\n      // Perform response processing outside of Angular zone to\n      // ensure no excessive change detection runs are executed\n      // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n      await this.ngZone.runOutsideAngular(async () => {\n        while (true) {\n          const {done, value} = await reader.read();\n\n          if (done) {\n            break;\n          }\n\n          chunks.push(value);\n          receivedLength += value.length;\n\n          if (request.reportProgress) {\n            partialText = request.responseType === 'text' ?\n                (partialText ?? '') + (decoder ??= new TextDecoder).decode(value, {stream: true}) :\n                undefined;\n\n            const reportProgress = () => observer.next({\n              type: HttpEventType.DownloadProgress,\n              total: contentLength ? +contentLength : undefined,\n              loaded: receivedLength,\n              partialText,\n            } as HttpDownloadProgressEvent);\n            reqZone ? reqZone.run(reportProgress) : reportProgress();\n          }\n        }\n      });\n\n      // Combine all chunks.\n      const chunksAll = this.concatChunks(chunks, receivedLength);\n      try {\n        const contentType = response.headers.get('Content-Type') ?? '';\n        body = this.parseBody(request, chunksAll, contentType);\n      } catch (error) {\n        // Body loading or parsing failed\n        observer.error(new HttpErrorResponse({\n          error,\n          headers: new HttpHeaders(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          url: getResponseUrl(response) ?? request.urlWithParams,\n        }));\n        return;\n      }\n    }\n\n    // Same behavior as the XhrBackend\n    if (status === 0) {\n      status = body ? HttpStatusCode.Ok : 0;\n    }\n\n    // ok determines whether the response will be transmitted on the event or\n    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n    // but a successful status code can still result in an error if the user\n    // asked for JSON data and the body cannot be parsed as such.\n    const ok = status >= 200 && status < 300;\n\n    if (ok) {\n      observer.next(new HttpResponse({\n        body,\n        headers,\n        status,\n        statusText,\n        url,\n      }));\n\n      // The full body has been received and delivered, no further events\n      // are possible. This request is complete.\n      observer.complete();\n    } else {\n      observer.error(new HttpErrorResponse({\n        error: body,\n        headers,\n        status,\n        statusText,\n        url,\n      }));\n    }\n  }\n\n  private parseBody(request: HttpRequest<any>, binContent: Uint8Array, contentType: string): string\n      |ArrayBuffer|Blob|object|null {\n    switch (request.responseType) {\n      case 'json':\n        // stripping the XSSI when present\n        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX, '');\n        return text === '' ? null : JSON.parse(text) as object;\n      case 'text':\n        return new TextDecoder().decode(binContent);\n      case 'blob':\n        return new Blob([binContent], {type: contentType});\n      case 'arraybuffer':\n        return binContent.buffer;\n    }\n  }\n\n  private createRequestInit(req: HttpRequest<any>): RequestInit {\n    // We could share some of this logic with the XhrBackend\n\n    const headers: Record<string, string> = {};\n    const credentials: RequestCredentials|undefined = req.withCredentials ? 'include' : undefined;\n\n    // Setting all the requested headers.\n    req.headers.forEach((name, values) => (headers[name] = values.join(',')));\n\n    // Add an Accept header if one isn't present already.\n    headers['Accept'] ??= 'application/json, text/plain, */*';\n\n    // Auto-detect the Content-Type header if one isn't present already.\n    if (!headers['Content-Type']) {\n      const detectedType = req.detectContentTypeHeader();\n      // Sometimes Content-Type detection fails.\n      if (detectedType !== null) {\n        headers['Content-Type'] = detectedType;\n      }\n    }\n\n    return {\n      body: req.serializeBody(),\n      method: req.method,\n      headers,\n      credentials,\n    };\n  }\n\n  private concatChunks(chunks: Uint8Array[], totalLength: number): Uint8Array {\n    const chunksAll = new Uint8Array(totalLength);\n    let position = 0;\n    for (const chunk of chunks) {\n      chunksAll.set(chunk, position);\n      position += chunk.length;\n    }\n\n    return chunksAll;\n  }\n}\n\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nexport abstract class FetchFactory {\n  abstract fetch: typeof fetch;\n}\n\nfunction noop(): void {}\n\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise: Promise<unknown>) {\n  promise.then(noop, noop);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPlatformServer} from '@angular/common';\nimport {EnvironmentInjector, inject, Injectable, InjectionToken, PLATFORM_ID, ɵConsole as Console, ɵformatRuntimeError as formatRuntimeError, ɵInitialRenderPendingTasks as InitialRenderPendingTasks} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {RuntimeErrorCode} from './errors';\nimport {FetchBackend} from './fetch';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http-intercept-requests-and-responses)\n * @see {@link HttpInterceptorFn}\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector.\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * Represents the next interceptor in an interceptor chain, or the real backend if there are no\n * further interceptors.\n *\n * Most interceptors will delegate to this function, and either modify the outgoing request or the\n * response when it arrives. Within the scope of the current request, however, this function may be\n * called any number of times, for any number of downstream requests. Such downstream requests need\n * not be to the same URL or even the same origin as the current request. It is also valid to not\n * call the downstream handler at all, and process the current request entirely within the\n * interceptor.\n *\n * This function should only be called within the scope of the request that's currently being\n * intercepted. Once that request is complete, this downstream handler function should not be\n * called.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http-intercept-requests-and-responses)\n */\nexport type HttpHandlerFn = (req: HttpRequest<unknown>) => Observable<HttpEvent<unknown>>;\n\n/**\n * An interceptor for HTTP requests made via `HttpClient`.\n *\n * `HttpInterceptorFn`s are middleware functions which `HttpClient` calls when a request is made.\n * These functions have the opportunity to modify the outgoing request or any response that comes\n * back, as well as block, redirect, or otherwise change the request or response semantics.\n *\n * An `HttpHandlerFn` representing the next interceptor (or the backend which will make a real HTTP\n * request) is provided. Most interceptors will delegate to this function, but that is not required\n * (see `HttpHandlerFn` for more details).\n *\n * `HttpInterceptorFn`s are executed in an [injection context](/guide/dependency-injection-context).\n * They have access to `inject()` via the `EnvironmentInjector` from which they were configured.\n *\n * @see [HTTP Guide](guide/http-intercept-requests-and-responses)\n * @see {@link withInterceptors}\n *\n * @usageNotes\n * Here is a noop interceptor that passes the request through without modifying it:\n * ```typescript\n * export const noopInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next:\n * HttpHandlerFn) => {\n *   return next(modifiedReq);\n * };\n * ```\n *\n * If you want to alter a request, clone it first and modify the clone before passing it to the\n * `next()` handler function.\n *\n * Here is a basic interceptor that adds a bearer token to the headers\n * ```typescript\n * export const authenticationInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next:\n * HttpHandlerFn) => {\n *    const userToken = 'MY_TOKEN'; const modifiedReq = req.clone({\n *      headers: req.headers.set('Authorization', `Bearer ${userToken}`),\n *    });\n *\n *    return next(modifiedReq);\n * };\n * ```\n */\nexport type HttpInterceptorFn = (req: HttpRequest<unknown>, next: HttpHandlerFn) =>\n    Observable<HttpEvent<unknown>>;\n\n/**\n * Function which invokes an HTTP interceptor chain.\n *\n * Each interceptor in the interceptor chain is turned into a `ChainedInterceptorFn` which closes\n * over the rest of the chain (represented by another `ChainedInterceptorFn`). The last such\n * function in the chain will instead delegate to the `finalHandlerFn`, which is passed down when\n * the chain is invoked.\n *\n * This pattern allows for a chain of many interceptors to be composed and wrapped in a single\n * `HttpInterceptorFn`, which is a useful abstraction for including different kinds of interceptors\n * (e.g. legacy class-based interceptors) in the same chain.\n */\ntype ChainedInterceptorFn<RequestT> = (req: HttpRequest<RequestT>, finalHandlerFn: HttpHandlerFn) =>\n    Observable<HttpEvent<RequestT>>;\n\nfunction interceptorChainEndFn(\n    req: HttpRequest<any>, finalHandlerFn: HttpHandlerFn): Observable<HttpEvent<any>> {\n  return finalHandlerFn(req);\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(\n    chainTailFn: ChainedInterceptorFn<any>,\n    interceptor: HttpInterceptor): ChainedInterceptorFn<any> {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n  });\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(\n    chainTailFn: ChainedInterceptorFn<unknown>, interceptorFn: HttpInterceptorFn,\n    injector: EnvironmentInjector): ChainedInterceptorFn<unknown> {\n  // clang-format off\n  return (initialRequest, finalHandlerFn) => injector.runInContext(() =>\n    interceptorFn(\n      initialRequest,\n      downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n    )\n  );\n  // clang-format on\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS =\n    new InjectionToken<readonly HttpInterceptor[]>(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nexport const HTTP_INTERCEPTOR_FNS =\n    new InjectionToken<readonly HttpInterceptorFn[]>(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nexport const HTTP_ROOT_INTERCEPTOR_FNS =\n    new InjectionToken<readonly HttpInterceptorFn[]>(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n\n/**\n * A provider to set a global primary http backend. If set, it will override the default one\n */\nexport const PRIMARY_HTTP_BACKEND =\n    new InjectionToken<HttpBackend>(ngDevMode ? 'PRIMARY_HTTP_BACKEND' : '');\n\n\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nexport function legacyInterceptorFnFactory(): HttpInterceptorFn {\n  let chain: ChainedInterceptorFn<any>|null = null;\n\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {optional: true}) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(\n          adaptLegacyInterceptorToChain, interceptorChainEndFn as ChainedInterceptorFn<any>);\n    }\n\n    const pendingTasks = inject(InitialRenderPendingTasks);\n    const taskId = pendingTasks.add();\n    return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n  };\n}\n\nlet fetchBackendWarningDisplayed = false;\n\n/** Internal function to reset the flag in tests */\nexport function resetFetchBackendWarningFlag() {\n  fetchBackendWarningDisplayed = false;\n}\n\n@Injectable()\nexport class HttpInterceptorHandler extends HttpHandler {\n  private chain: ChainedInterceptorFn<unknown>|null = null;\n  private readonly pendingTasks = inject(InitialRenderPendingTasks);\n\n  constructor(private backend: HttpBackend, private injector: EnvironmentInjector) {\n    super();\n\n    // Check if there is a preferred HTTP backend configured and use it if that's the case.\n    // This is needed to enable `FetchBackend` globally for all HttpClient's when `withFetch`\n    // is used.\n    const primaryHttpBackend = inject(PRIMARY_HTTP_BACKEND, {optional: true});\n    this.backend = primaryHttpBackend ?? backend;\n\n    // We strongly recommend using fetch backend for HTTP calls when SSR is used\n    // for an application. The logic below checks if that's the case and produces\n    // a warning otherwise.\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n      const isServer = isPlatformServer(injector.get(PLATFORM_ID));\n      if (isServer && !(this.backend instanceof FetchBackend)) {\n        fetchBackendWarningDisplayed = true;\n        injector.get(Console).warn(formatRuntimeError(\n            RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR,\n            'Angular detected that `HttpClient` is not configured ' +\n                'to use `fetch` APIs. It\\'s strongly recommended to ' +\n                'enable `fetch` for applications that use Server-Side Rendering ' +\n                'for better performance and compatibility. ' +\n                'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' +\n                'call at the root of the application.'));\n      }\n    }\n  }\n\n  override handle(initialRequest: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(new Set([\n        ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n        ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n      ]));\n\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight(\n          (nextSequencedFn, interceptorFn) =>\n              chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector),\n          interceptorChainEndFn as ChainedInterceptorFn<unknown>);\n    }\n\n    const taskId = this.pendingTasks.add();\n    return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest))\n        .pipe(finalize(() => this.pendingTasks.remove(taskId)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {EnvironmentInjector, Inject, inject, Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpResponse, HttpStatusCode} from './response';\n\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument: Document|undefined;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nexport const JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext {\n  [key: string]: (data: any) => void;\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  /**\n   * A resolved promise that can be used to schedule microtasks in the event handlers.\n   */\n  private readonly resolvedPromise = Promise.resolve();\n\n  constructor(private callbackMap: JsonpCallbackContext, @Inject(DOCUMENT) private document: any) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n    if (req.headers.keys().length > 0) {\n      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any|null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = (event: Event) => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK),\n            }));\n            return;\n          }\n\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(new HttpResponse({\n            body,\n            status: HttpStatusCode.Ok,\n            statusText: 'OK',\n            url,\n          }));\n\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError: any = (error: Error) => {\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url,\n        }));\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        }\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n\n  private removeListeners(script: HTMLScriptElement): void {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    if (!foreignDocument) {\n      foreignDocument = (this.document.implementation as DOMImplementation).createHTMLDocument();\n    }\n    foreignDocument.adoptNode(script);\n  }\n}\n\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nexport function jsonpInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req as HttpRequest<never>);\n  }\n\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.injector.runInContext(\n        () => jsonpInterceptorFn(\n            initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable, ɵRuntimeError as RuntimeError} from '@angular/core';\nimport {from, Observable, Observer, of} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\nimport {HttpBackend} from './backend';\nimport {RuntimeErrorCode} from './errors';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpStatusCode, HttpUploadProgressEvent} from './response';\n\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new RuntimeError(\n          RuntimeErrorCode.MISSING_JSONP_MODULE,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n    }\n\n    // Check whether this factory has a special function to load an XHR implementation\n    // for various non-browser environments. We currently limit it to only `ServerXhr`\n    // class, which needs to load an XHR implementation.\n    const xhrFactory: XhrFactory&{ɵloadImpl?: () => Promise<void>} = this.xhrFactory;\n    const source: Observable<void|null> =\n        xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n\n    return source.pipe(\n        switchMap(() => {\n          // Everything happens on Observable subscription.\n          return new Observable((observer: Observer<HttpEvent<any>>) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials\n            // flag.\n            const xhr = xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (req.withCredentials) {\n              xhr.withCredentials = true;\n            }\n\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n              xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n              const detectedType = req.detectContentTypeHeader();\n              // Sometimes Content-Type detection fails.\n              if (detectedType !== null) {\n                xhr.setRequestHeader('Content-Type', detectedType);\n              }\n            }\n\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n              const responseType = req.responseType.toLowerCase();\n\n              // JSON responses need to be processed as text. This is because if the server\n              // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n              // xhr.response will be null, and xhr.responseText cannot be accessed to\n              // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n              // is parsed by first requesting text and then applying JSON.parse.\n              xhr.responseType = ((responseType !== 'json') ? responseType : 'text') as any;\n            }\n\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse: HttpHeaderResponse|null = null;\n\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = (): HttpHeaderResponse => {\n              if (headerResponse !== null) {\n                return headerResponse;\n              }\n\n              const statusText = xhr.statusText || 'OK';\n\n              // Parse headers from XMLHttpRequest - this step is lazy.\n              const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n              // Read the response URL from the XMLHttpResponse instance and fall back on the\n              // request URL.\n              const url = getResponseUrl(xhr) || req.url;\n\n              // Construct the HttpHeaderResponse and memoize it.\n              headerResponse =\n                  new HttpHeaderResponse({headers, status: xhr.status, statusText, url});\n              return headerResponse;\n            };\n\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n              // Read response state from the memoized partial data.\n              let {headers, status, statusText, url} = partialFromXhr();\n\n              // The body will be read out if present.\n              let body: any|null = null;\n\n              if (status !== HttpStatusCode.NoContent) {\n                // Use XMLHttpRequest.response if set, responseText otherwise.\n                body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n              }\n\n              // Normalize another potential bug (this one comes from CORS).\n              if (status === 0) {\n                status = !!body ? HttpStatusCode.Ok : 0;\n              }\n\n              // ok determines whether the response will be transmitted on the event or\n              // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n              // but a successful status code can still result in an error if the user\n              // asked for JSON data and the body cannot be parsed as such.\n              let ok = status >= 200 && status < 300;\n\n              // Check whether the body needs to be parsed as JSON (in many cases the browser\n              // will have done that already).\n              if (req.responseType === 'json' && typeof body === 'string') {\n                // Save the original body, before attempting XSSI prefix stripping.\n                const originalBody = body;\n                body = body.replace(XSSI_PREFIX, '');\n                try {\n                  // Attempt the parse. If it fails, a parse error should be delivered to the\n                  // user.\n                  body = body !== '' ? JSON.parse(body) : null;\n                } catch (error) {\n                  // Since the JSON.parse failed, it's reasonable to assume this might not have\n                  // been a JSON response. Restore the original body (including any XSSI prefix)\n                  // to deliver a better error response.\n                  body = originalBody;\n\n                  // If this was an error request to begin with, leave it as a string, it\n                  // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                  if (ok) {\n                    // Even though the response status was 2xx, this is still an error.\n                    ok = false;\n                    // The parse error contains the text of the body that failed to parse.\n                    body = {error, text: body} as HttpJsonParseError;\n                  }\n                }\n              }\n\n              if (ok) {\n                // A successful response is delivered on the event stream.\n                observer.next(new HttpResponse({\n                  body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }));\n                // The full body has been received and delivered, no further events\n                // are possible. This request is complete.\n                observer.complete();\n              } else {\n                // An unsuccessful request is delivered on the error channel.\n                observer.error(new HttpErrorResponse({\n                  // The error in this case is the response body (error from the server).\n                  error: body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }));\n              }\n            };\n\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error: ProgressEvent) => {\n              const {url} = partialFromXhr();\n              const res = new HttpErrorResponse({\n                error,\n                status: xhr.status || 0,\n                statusText: xhr.statusText || 'Unknown Error',\n                url: url || undefined,\n              });\n              observer.error(res);\n            };\n\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progress event.\n            let sentHeaders = false;\n\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event: ProgressEvent) => {\n              // Send the HttpResponseHeaders event if it hasn't been sent already.\n              if (!sentHeaders) {\n                observer.next(partialFromXhr());\n                sentHeaders = true;\n              }\n\n              // Start building the download progress event to deliver on the response\n              // event stream.\n              let progressEvent: HttpDownloadProgressEvent = {\n                type: HttpEventType.DownloadProgress,\n                loaded: event.loaded,\n              };\n\n              // Set the total number of bytes in the event if it's available.\n              if (event.lengthComputable) {\n                progressEvent.total = event.total;\n              }\n\n              // If the request was for text content and a partial response is\n              // available on XMLHttpRequest, include it in the progress event\n              // to allow for streaming reads.\n              if (req.responseType === 'text' && !!xhr.responseText) {\n                progressEvent.partialText = xhr.responseText;\n              }\n\n              // Finally, fire the event.\n              observer.next(progressEvent);\n            };\n\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event: ProgressEvent) => {\n              // Upload progress events are simpler. Begin building the progress\n              // event.\n              let progress: HttpUploadProgressEvent = {\n                type: HttpEventType.UploadProgress,\n                loaded: event.loaded,\n              };\n\n              // If the total number of bytes being uploaded is available, include\n              // it.\n              if (event.lengthComputable) {\n                progress.total = event.total;\n              }\n\n              // Send the event.\n              observer.next(progress);\n            };\n\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n              // Download progress is always enabled if requested.\n              xhr.addEventListener('progress', onDownProgress);\n\n              // Upload progress depends on whether there is a body to upload.\n              if (reqBody !== null && xhr.upload) {\n                xhr.upload.addEventListener('progress', onUpProgress);\n              }\n            }\n\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody!);\n            observer.next({type: HttpEventType.Sent});\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n              // On a cancellation, remove all registered event listeners.\n              xhr.removeEventListener('error', onError);\n              xhr.removeEventListener('abort', onError);\n              xhr.removeEventListener('load', onLoad);\n              xhr.removeEventListener('timeout', onError);\n\n              if (req.reportProgress) {\n                xhr.removeEventListener('progress', onDownProgress);\n                if (reqBody !== null && xhr.upload) {\n                  xhr.upload.removeEventListener('progress', onUpProgress);\n                }\n              }\n\n              // Finally, abort the in-flight request.\n              if (xhr.readyState !== xhr.DONE) {\n                xhr.abort();\n              }\n            };\n          });\n        }),\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵparseCookieValue as parseCookieValue} from '@angular/common';\nimport {EnvironmentInjector, Inject, inject, Injectable, InjectionToken, PLATFORM_ID} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpHandlerFn, HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_ENABLED = new InjectionToken<boolean>('XSRF_ENABLED');\n\nexport const XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>('XSRF_COOKIE_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\n\nexport const XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nexport const XSRF_HEADER_NAME = new InjectionToken<string>('XSRF_HEADER_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string|null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string|null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any, @Inject(PLATFORM_ID) private platform: string,\n      @Inject(XSRF_COOKIE_NAME) private cookieName: string) {}\n\n  getToken(): string|null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\nexport function xsrfInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n      lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({headers: req.headers.set(headerName, token)});\n  }\n  return next(req);\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.injector.runInContext(\n        () =>\n            xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EnvironmentProviders, inject, InjectionToken, makeEnvironmentProviders, Provider} from '@angular/core';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {FetchBackend} from './fetch';\nimport {HTTP_INTERCEPTOR_FNS, HttpInterceptorFn, HttpInterceptorHandler, legacyInterceptorFnFactory, PRIMARY_HTTP_BACKEND} from './interceptor';\nimport {jsonpCallbackContext, JsonpCallbackContext, JsonpClientBackend, jsonpInterceptorFn} from './jsonp';\nimport {HttpXhrBackend} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_ENABLED, XSRF_HEADER_NAME, xsrfInterceptorFn} from './xsrf';\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nexport enum HttpFeatureKind {\n  Interceptors,\n  LegacyInterceptors,\n  CustomXsrfConfiguration,\n  NoXsrfProtection,\n  JsonpSupport,\n  RequestsMadeViaParent,\n  Fetch,\n}\n\n/**\n * A feature for use when configuring `provideHttpClient`.\n *\n * @publicApi\n */\nexport interface HttpFeature<KindT extends HttpFeatureKind> {\n  ɵkind: KindT;\n  ɵproviders: Provider[];\n}\n\nfunction makeHttpFeature<KindT extends HttpFeatureKind>(\n    kind: KindT, providers: Provider[]): HttpFeature<KindT> {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers,\n  };\n}\n\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * <div class=\"alert is-helpful\">\n *\n * It's strongly recommended to enable\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\n *\n * ```\n * provideHttpClient(withFetch());\n * ```\n *\n * </div>\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nexport function provideHttpClient(...features: HttpFeature<HttpFeatureKind>[]):\n    EnvironmentProviders {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.ɵkind));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n        featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(\n          ngDevMode ?\n              `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n              '');\n    }\n  }\n\n  const providers: Provider[] = [\n    HttpClient,\n    HttpXhrBackend,\n    HttpInterceptorHandler,\n    {provide: HttpHandler, useExisting: HttpInterceptorHandler},\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: xsrfInterceptorFn,\n      multi: true,\n    },\n    {provide: XSRF_ENABLED, useValue: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n  ];\n\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n\n  return makeEnvironmentProviders(providers);\n}\n\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nexport function withInterceptors(interceptorFns: HttpInterceptorFn[]):\n    HttpFeature<HttpFeatureKind.Interceptors> {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true,\n    };\n  }));\n}\n\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken<HttpInterceptorFn>('LEGACY_INTERCEPTOR_FN');\n\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nexport function withInterceptorsFromDi(): HttpFeature<HttpFeatureKind.LegacyInterceptors> {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n    {\n      provide: LEGACY_INTERCEPTOR_FN,\n      useFactory: legacyInterceptorFnFactory,\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useExisting: LEGACY_INTERCEPTOR_FN,\n      multi: true,\n    }\n  ]);\n}\n\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withXsrfConfiguration(\n    {cookieName, headerName}: {cookieName?: string, headerName?: string}):\n    HttpFeature<HttpFeatureKind.CustomXsrfConfiguration> {\n  const providers: Provider[] = [];\n  if (cookieName !== undefined) {\n    providers.push({provide: XSRF_COOKIE_NAME, useValue: cookieName});\n  }\n  if (headerName !== undefined) {\n    providers.push({provide: XSRF_HEADER_NAME, useValue: headerName});\n  }\n\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withNoXsrfProtection(): HttpFeature<HttpFeatureKind.NoXsrfProtection> {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n    {\n      provide: XSRF_ENABLED,\n      useValue: false,\n    },\n  ]);\n}\n\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nexport function withJsonpSupport(): HttpFeature<HttpFeatureKind.JsonpSupport> {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true},\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nexport function withRequestsMadeViaParent(): HttpFeature<HttpFeatureKind.RequestsMadeViaParent> {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        const handlerFromParent = inject(HttpHandler, {skipSelf: true, optional: true});\n        if (ngDevMode && handlerFromParent === null) {\n          throw new Error(\n              'withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n        }\n        return handlerFromParent;\n      },\n    },\n  ]);\n}\n\n\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * This `FetchBackend` requires the support of the Fetch API which is available on all evergreen\n * browsers and on NodeJS from v18 onward.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n */\nexport function withFetch(): HttpFeature<HttpFeatureKind.Fetch> {\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof fetch !== 'function') {\n    // TODO: Create a runtime error\n    // TODO: Use ENVIRONMENT_INITIALIZER to contextualize the error message (browser or server)\n    throw new Error(\n        'The `withFetch` feature of HttpClient requires the `fetch` API to be available. ' +\n        'If you run the code in a Node environment, make sure you use Node v18.10 or later.');\n  }\n\n  return makeHttpFeature(HttpFeatureKind.Fetch, [\n    FetchBackend,\n    {provide: HttpBackend, useExisting: FetchBackend},\n    {provide: PRIMARY_HTTP_BACKEND, useExisting: FetchBackend},\n  ]);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {HTTP_INTERCEPTORS} from './interceptor';\nimport {provideHttpClient, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withXsrfConfiguration} from './provider';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_DEFAULT_COOKIE_NAME, XSRF_DEFAULT_HEADER_NAME, XSRF_ENABLED} from './xsrf';\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    withXsrfConfiguration({\n      cookieName: XSRF_DEFAULT_COOKIE_NAME,\n      headerName: XSRF_DEFAULT_HEADER_NAME,\n    }).ɵproviders,\n    {provide: XSRF_ENABLED, useValue: true},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        withNoXsrfProtection().ɵproviders,\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).ɵproviders,\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    provideHttpClient(withInterceptorsFromDi()),\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    withJsonpSupport().ɵproviders,\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BOOTSTRAP_LISTENER, ApplicationRef, inject, InjectionToken, makeStateKey, Provider, StateKey, TransferState, ɵformatRuntimeError as formatRuntimeError, ɵperformanceMarkFeature as performanceMarkFeature, ɵtruncateMiddle as truncateMiddle, ɵwhenStable as whenStable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {tap} from 'rxjs/operators';\n\nimport {RuntimeErrorCode} from './errors';\nimport {HttpHeaders} from './headers';\nimport {HTTP_ROOT_INTERCEPTOR_FNS, HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n/**\n * Options to configure how TransferCache should be used to cache requests made via HttpClient.\n *\n * @param includeHeaders Specifies which headers should be included into cached responses. No\n *     headers are included by default.\n * @param filter A function that receives a request as an argument and returns a boolean to indicate\n *     whether a request should be included into the cache.\n * @param includePostRequests Enables caching for POST requests. By default, only GET and HEAD\n *     requests are cached. This option can be enabled if POST requests are used to retrieve data\n *     (for example using GraphQL).\n *\n * @publicApi\n */\nexport type HttpTransferCacheOptions = {\n  includeHeaders?: string[],\n  filter?: (req: HttpRequest<unknown>) => boolean,\n  includePostRequests?: boolean\n};\n\n/**\n * Keys within cached response data structure.\n */\n\nexport const BODY = 'b';\nexport const HEADERS = 'h';\nexport const STATUS = 's';\nexport const STATUS_TEXT = 'st';\nexport const URL = 'u';\nexport const RESPONSE_TYPE = 'rt';\n\n\ninterface TransferHttpResponse {\n  /** body */\n  [BODY]: any;\n  /** headers */\n  [HEADERS]: Record<string, string[]>;\n  /** status */\n  [STATUS]?: number;\n  /** statusText */\n  [STATUS_TEXT]?: string;\n  /** url */\n  [URL]?: string;\n  /** responseType */\n  [RESPONSE_TYPE]?: HttpRequest<unknown>['responseType'];\n}\n\ninterface CacheOptions extends HttpTransferCacheOptions {\n  isCacheActive: boolean;\n}\n\nconst CACHE_OPTIONS =\n    new InjectionToken<CacheOptions>(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_OPTIONS' : '');\n\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\n\nexport function transferCacheInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const {isCacheActive, ...globalOptions} = inject(CACHE_OPTIONS);\n  const {transferCache: requestOptions, method: requestMethod} = req;\n\n  // In the following situations we do not want to cache the request\n  if (!isCacheActive ||\n      // POST requests are allowed either globally or at request level\n      (requestMethod === 'POST' && !globalOptions.includePostRequests && !requestOptions) ||\n      (requestMethod !== 'POST' && !ALLOWED_METHODS.includes(requestMethod)) ||\n      requestOptions === false ||  //\n      (globalOptions.filter?.(req)) === false) {\n    return next(req);\n  }\n\n  const transferState = inject(TransferState);\n  const storeKey = makeCacheKey(req);\n  const response = transferState.get(storeKey, null);\n\n  let headersToInclude = globalOptions.includeHeaders;\n  if (typeof requestOptions === 'object' && requestOptions.includeHeaders) {\n    // Request-specific config takes precedence over the global config.\n    headersToInclude = requestOptions.includeHeaders;\n  }\n\n  if (response) {\n    const {\n      [BODY]: undecodedBody,\n      [RESPONSE_TYPE]: responseType,\n      [HEADERS]: httpHeaders,\n      [STATUS]: status,\n      [STATUS_TEXT]: statusText,\n      [URL]: url\n    } = response;\n    // Request found in cache. Respond using it.\n    let body: ArrayBuffer|Blob|string|undefined = undecodedBody;\n\n    switch (responseType) {\n      case 'arraybuffer':\n        body = new TextEncoder().encode(undecodedBody).buffer;\n        break;\n      case 'blob':\n        body = new Blob([undecodedBody]);\n        break;\n    }\n\n    // We want to warn users accessing a header provided from the cache\n    // That HttpTransferCache alters the headers\n    // The warning will be logged a single time by HttpHeaders instance\n    let headers = new HttpHeaders(httpHeaders);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Append extra logic in dev mode to produce a warning when a header\n      // that was not transferred to the client is accessed in the code via `get`\n      // and `has` calls.\n      headers = appendMissingHeadersDetection(req.url, headers, headersToInclude ?? []);\n    }\n\n\n    return of(\n        new HttpResponse({\n          body,\n          headers,\n          status,\n          statusText,\n          url,\n        }),\n    );\n  }\n\n\n  // Request not found in cache. Make the request and cache it.\n  return next(req).pipe(\n      tap((event: HttpEvent<unknown>) => {\n        if (event instanceof HttpResponse) {\n          transferState.set<TransferHttpResponse>(storeKey, {\n            [BODY]: event.body,\n            [HEADERS]: getFilteredHeaders(event.headers, headersToInclude),\n            [STATUS]: event.status,\n            [STATUS_TEXT]: event.statusText,\n            [URL]: event.url || '',\n            [RESPONSE_TYPE]: req.responseType,\n          });\n        }\n      }),\n  );\n}\n\nfunction getFilteredHeaders(\n    headers: HttpHeaders,\n    includeHeaders: string[]|undefined,\n    ): Record<string, string[]> {\n  if (!includeHeaders) {\n    return {};\n  }\n\n  const headersMap: Record<string, string[]> = {};\n  for (const key of includeHeaders) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\nfunction makeCacheKey(request: HttpRequest<any>): StateKey<TransferHttpResponse> {\n  // make the params encoded same as a url so it's easy to identify\n  const {params, method, responseType, url} = request;\n  const encodedParams = params.keys().sort().map((k) => `${k}=${params.getAll(k)}`).join('&');\n  const key = method + '.' + responseType + '.' + url + '?' + encodedParams;\n\n  const hash = generateHash(key);\n\n  return makeStateKey(hash);\n}\n\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value: string): string {\n  let hash = 0;\n\n  for (const char of value) {\n    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n  }\n\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n\n  return hash.toString();\n}\n\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nexport function withHttpTransferCache(cacheOptions: HttpTransferCacheOptions): Provider[] {\n  return [\n    {\n      provide: CACHE_OPTIONS,\n      useFactory: (): CacheOptions => {\n        performanceMarkFeature('NgHttpTransferCache');\n        return {isCacheActive: true, ...cacheOptions};\n      }\n    },\n    {\n      provide: HTTP_ROOT_INTERCEPTOR_FNS,\n      useValue: transferCacheInterceptorFn,\n      multi: true,\n      deps: [TransferState, CACHE_OPTIONS]\n    },\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      multi: true,\n      useFactory: () => {\n        const appRef = inject(ApplicationRef);\n        const cacheState = inject(CACHE_OPTIONS);\n\n        return () => {\n          whenStable(appRef).then(() => {\n            cacheState.isCacheActive = false;\n          });\n        };\n      }\n    }\n  ];\n}\n\n\n/**\n * This function will add a proxy to an HttpHeader to intercept calls to get/has\n * and log a warning if the header entry requested has been removed\n */\nfunction appendMissingHeadersDetection(\n    url: string, headers: HttpHeaders, headersToInclude: string[]): HttpHeaders {\n  const warningProduced = new Set();\n  return new Proxy<HttpHeaders>(headers, {\n    get(target: HttpHeaders, prop: keyof HttpHeaders): unknown {\n      const value = Reflect.get(target, prop);\n      const methods: Set<keyof HttpHeaders> = new Set(['get', 'has', 'getAll']);\n\n      if (typeof value !== 'function' || !methods.has(prop)) {\n        return value;\n      }\n\n      return (headerName: string) => {\n        // We log when the key has been removed and a warning hasn't been produced for the header\n        const key = (prop + ':' + headerName).toLowerCase();  // e.g. `get:cache-control`\n        if (!headersToInclude.includes(headerName) && !warningProduced.has(key)) {\n          warningProduced.add(key);\n          const truncatedUrl = truncateMiddle(url);\n\n          // TODO: create Error guide for this warning\n          console.warn(formatRuntimeError(\n              RuntimeErrorCode.HEADERS_ALTERED_BY_TRANSFER_CACHE,\n              `Angular detected that the \\`${\n                  headerName}\\` header is accessed, but the value of the header ` +\n                  `was not transferred from the server to the client by the HttpTransferCache. ` +\n                  `To include the value of the \\`${headerName}\\` header for the \\`${\n                      truncatedUrl}\\` request, ` +\n                  `use the \\`includeHeaders\\` list. The \\`includeHeaders\\` can be defined either ` +\n                  `on a request level by adding the \\`transferCache\\` parameter, or on an application ` +\n                  `level by adding the \\`httpCacheTransfer.includeHeaders\\` argument to the ` +\n                  `\\`provideClientHydration()\\` call. `));\n        }\n\n        // invoking the original method\n        return (value as Function).apply(target, [headerName]);\n      };\n    }\n  });\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵDomAdapter as DomAdapter} from '@angular/common';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  override readonly supportsDOMEvents: boolean = true;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵparseCookieValue as parseCookieValue, ɵsetRootDomAdapter as setRootDomAdapter} from '@angular/common';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  override onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener);\n    return () => {\n      el.removeEventListener(evt, listener);\n    };\n  }\n  override dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  override remove(node: Node): void {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n  override createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  override createHtmlDocument(): Document {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  override getDefaultDocument(): Document {\n    return document;\n  }\n\n  override isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  override isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  override getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  override getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  override resetBaseElement(): void {\n    baseElement = null;\n  }\n  override getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  override getCookie(name: string): string|null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: HTMLAnchorElement|undefined;\nfunction relativePath(url: any): string {\n  urlParsingNode = urlParsingNode || document.createElement('a');\n  urlParsingNode.setAttribute('href', url);\n  const pathName = urlParsingNode.pathname;\n  return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {GetTestability, Testability, TestabilityRegistry, ɵglobal as global, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport class BrowserGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new RuntimeError(\n            RuntimeErrorCode.TESTABILITY_NOT_FOUND,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: (didWork: boolean) => void) => {\n      const testabilities = global['getAllAngularTestabilities']() as Testability[];\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: boolean) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach((testability) => {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  build(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken, NgZone, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../errors';\n\n/**\n * The injection token for plugins of the `EventManager` service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach((plugin) => {\n      plugin.manager = this;\n    });\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    let plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    plugin = plugins.find((plugin) => plugin.supports(eventName));\n    if (!plugin) {\n      throw new RuntimeError(\n          RuntimeErrorCode.NO_PLUGIN_FOR_EVENT,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `No event manager plugin found for event ${eventName}`);\n    }\n\n    this._eventNameToPlugin.set(eventName, plugin);\n    return plugin;\n  }\n}\n\n/**\n * The plugin definition for the `EventManager` class\n *\n * It can be used as a base class to create custom manager plugins, i.e. you can create your own\n * class that extends the `EventManagerPlugin` one.\n *\n * @publicApi\n */\nexport abstract class EventManagerPlugin {\n  // TODO: remove (has some usage in G3)\n  constructor(private _doc: any) {}\n\n  // Using non-null assertion because it's set by EventManager's constructor\n  manager!: EventManager;\n\n  /**\n   * Should return `true` for every event name that should be supported by this plugin\n   */\n  abstract supports(eventName: string): boolean;\n\n  /**\n   * Implement the behaviour for the supported events\n   */\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, isPlatformServer} from '@angular/common';\nimport {APP_ID, CSP_NONCE, Inject, Injectable, OnDestroy, Optional, PLATFORM_ID} from '@angular/core';\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\n\n@Injectable()\nexport class SharedStylesHost implements OnDestroy {\n  // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n  private readonly styleRef = new Map < string /** Style string */, {\n    elements: HTMLStyleElement[];\n    usage: number\n  }\n  > ();\n  private readonly hostNodes = new Set<Node>();\n  private readonly styleNodesInDOM: Map<string, HTMLStyleElement>|null;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n      @Inject(DOCUMENT) private readonly doc: Document,\n      @Inject(APP_ID) private readonly appId: string,\n      @Inject(CSP_NONCE) @Optional() private nonce?: string|null,\n      @Inject(PLATFORM_ID) readonly platformId: object = {}) {\n    this.styleNodesInDOM = this.collectServerRenderedStyles();\n    this.platformIsServer = isPlatformServer(platformId);\n    this.resetHostNodes();\n  }\n\n  addStyles(styles: string[]): void {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, 1);\n\n      if (usageCount === 1) {\n        this.onStyleAdded(style);\n      }\n    }\n  }\n\n  removeStyles(styles: string[]): void {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, -1);\n\n      if (usageCount <= 0) {\n        this.onStyleRemoved(style);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    if (styleNodesInDOM) {\n      styleNodesInDOM.forEach((node) => node.remove());\n      styleNodesInDOM.clear();\n    }\n\n    for (const style of this.getAllStyles()) {\n      this.onStyleRemoved(style);\n    }\n\n    this.resetHostNodes();\n  }\n\n  addHost(hostNode: Node): void {\n    this.hostNodes.add(hostNode);\n\n    for (const style of this.getAllStyles()) {\n      this.addStyleToHost(hostNode, style);\n    }\n  }\n\n  removeHost(hostNode: Node): void {\n    this.hostNodes.delete(hostNode);\n  }\n\n  private getAllStyles(): IterableIterator<string> {\n    return this.styleRef.keys();\n  }\n\n  private onStyleAdded(style: string): void {\n    for (const host of this.hostNodes) {\n      this.addStyleToHost(host, style);\n    }\n  }\n\n  private onStyleRemoved(style: string): void {\n    const styleRef = this.styleRef;\n    styleRef.get(style)?.elements?.forEach((node) => node.remove());\n    styleRef.delete(style);\n  }\n\n  private collectServerRenderedStyles(): Map<string, HTMLStyleElement>|null {\n    const styles = this.doc.head?.querySelectorAll<HTMLStyleElement>(\n        `style[${APP_ID_ATTRIBUTE_NAME}=\"${this.appId}\"]`);\n\n    if (styles?.length) {\n      const styleMap = new Map<string, HTMLStyleElement>();\n\n      styles.forEach((style) => {\n        if (style.textContent != null) {\n          styleMap.set(style.textContent, style);\n        }\n      });\n\n      return styleMap;\n    }\n\n    return null;\n  }\n\n  private changeUsageCount(style: string, delta: number): number {\n    const map = this.styleRef;\n    if (map.has(style)) {\n      const styleRefValue = map.get(style)!;\n      styleRefValue.usage += delta;\n\n      return styleRefValue.usage;\n    }\n\n    map.set(style, {usage: delta, elements: []});\n    return delta;\n  }\n\n  private getStyleElement(host: Node, style: string): HTMLStyleElement {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    const styleEl = styleNodesInDOM?.get(style);\n    if (styleEl?.parentNode === host) {\n      // `styleNodesInDOM` cannot be undefined due to the above `styleNodesInDOM?.get`.\n      styleNodesInDOM!.delete(style);\n\n      styleEl.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // This attribute is solely used for debugging purposes.\n        styleEl.setAttribute('ng-style-reused', '');\n      }\n\n      return styleEl;\n    } else {\n      const styleEl = this.doc.createElement('style');\n\n      if (this.nonce) {\n        styleEl.setAttribute('nonce', this.nonce);\n      }\n\n      styleEl.textContent = style;\n\n      if (this.platformIsServer) {\n        styleEl.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n      }\n\n      host.appendChild(styleEl);\n\n      return styleEl;\n    }\n  }\n\n  private addStyleToHost(host: Node, style: string): void {\n    const styleEl = this.getStyleElement(host, style);\n    const styleRef = this.styleRef;\n    const styleElRef = styleRef.get(style)?.elements;\n    if (styleElRef) {\n      styleElRef.push(styleEl);\n    } else {\n      styleRef.set(style, {elements: [styleEl], usage: 1});\n    }\n  }\n\n  private resetHostNodes(): void {\n    const hostNodes = this.hostNodes;\n    hostNodes.clear();\n    // Re-add the head element back since this is the default host.\n    hostNodes.add(this.doc.head);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, isPlatformServer, ɵgetDOM as getDOM} from '@angular/common';\nimport {APP_ID, CSP_NONCE, Inject, Injectable, InjectionToken, NgZone, OnDestroy, PLATFORM_ID, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nimport {EventManager} from './events/event_manager';\nimport {SharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/MathML/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `true`.\n * @publicApi\n */\nexport const REMOVE_STYLES_ON_COMPONENT_DESTROY =\n    new InjectionToken<boolean>('RemoveStylesOnCompDestroy', {\n      providedIn: 'root',\n      factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT,\n    });\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimStylesContent(compId: string, styles: string[]): string[] {\n  return styles.map(s => s.replace(COMPONENT_REGEX, compId));\n}\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2, OnDestroy {\n  private readonly rendererByCompId =\n      new Map<string, EmulatedEncapsulationDomRenderer2|NoneEncapsulationDomRenderer>();\n  private readonly defaultRenderer: Renderer2;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n      private readonly eventManager: EventManager,\n      private readonly sharedStylesHost: SharedStylesHost,\n      @Inject(APP_ID) private readonly appId: string,\n      @Inject(REMOVE_STYLES_ON_COMPONENT_DESTROY) private removeStylesOnCompDestroy: boolean,\n      @Inject(DOCUMENT) private readonly doc: Document,\n      @Inject(PLATFORM_ID) readonly platformId: Object,\n      readonly ngZone: NgZone,\n      @Inject(CSP_NONCE) private readonly nonce: string|null = null,\n  ) {\n    this.platformIsServer = isPlatformServer(platformId);\n    this.defaultRenderer =\n        new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n\n    if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {\n      // Domino does not support shadow DOM.\n      type = {...type, encapsulation: ViewEncapsulation.Emulated};\n    }\n\n    const renderer = this.getOrCreateRenderer(element, type);\n    // Renderers have different logic due to different encapsulation behaviours.\n    // Ex: for emulated, an attribute is added to the element.\n    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n      renderer.applyToHost(element);\n    } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n      renderer.applyStyles();\n    }\n\n    return renderer;\n  }\n\n  private getOrCreateRenderer(element: any, type: RendererType2): Renderer2 {\n    const rendererByCompId = this.rendererByCompId;\n    let renderer = rendererByCompId.get(type.id);\n\n    if (!renderer) {\n      const doc = this.doc;\n      const ngZone = this.ngZone;\n      const eventManager = this.eventManager;\n      const sharedStylesHost = this.sharedStylesHost;\n      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n      const platformIsServer = this.platformIsServer;\n\n      switch (type.encapsulation) {\n        case ViewEncapsulation.Emulated:\n          renderer = new EmulatedEncapsulationDomRenderer2(\n              eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc,\n              ngZone, platformIsServer);\n          break;\n        case ViewEncapsulation.ShadowDom:\n          return new ShadowDomRenderer(\n              eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce,\n              platformIsServer);\n        default:\n          renderer = new NoneEncapsulationDomRenderer(\n              eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone,\n              platformIsServer);\n          break;\n      }\n\n      rendererByCompId.set(type.id, renderer);\n    }\n\n    return renderer;\n  }\n\n  ngOnDestroy() {\n    this.rendererByCompId.clear();\n  }\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  /**\n   * By default this renderer throws when encountering synthetic properties\n   * This can be disabled for example by the AsyncAnimationRendererFactory\n   */\n  throwOnSyntheticProps = true;\n\n  constructor(\n      private readonly eventManager: EventManager, private readonly doc: Document,\n      private readonly ngZone: NgZone, private readonly platformIsServer: boolean) {}\n\n  destroy(): void {}\n\n  destroyNode = null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return this.doc.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return this.doc.createComment(value);\n  }\n\n  createText(value: string): any {\n    return this.doc.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new RuntimeError(\n          RuntimeErrorCode.ROOT_NODE_NOT_FOUND,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    if (el == null) {\n      return;\n    }\n\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.throwOnSyntheticProps &&\n        checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.throwOnSyntheticProps &&\n        checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      target = getDOM().getGlobalEventTarget(this.doc, target);\n      if (!target) {\n        throw new Error(`Unsupported event target ${target} for event ${event}`);\n      }\n    }\n\n    return this.eventManager.addEventListener(\n               target, event, this.decoratePreventDefault(callback)) as VoidFunction;\n  }\n\n  private decoratePreventDefault(eventHandler: Function): Function {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n    // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n    // unwrap the listener (see below).\n    return (event: any) => {\n      // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n      // debug_node can inspect the listener toString contents for the existence of this special\n      // token. Because the token is a string literal, it is ensured to not be modified by compiled\n      // code.\n      if (event === '__ngUnwrap__') {\n        return eventHandler;\n      }\n\n      // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n      const allowDefaultBehavior = this.platformIsServer ?\n          this.ngZone.runGuarded(() => eventHandler(event)) :\n          eventHandler(event);\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n      }\n\n      return undefined;\n    };\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY,\n        `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${\n            name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\n\n\nfunction isTemplateNode(node: any): node is HTMLTemplateElement {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager,\n      private sharedStylesHost: SharedStylesHost,\n      private hostEl: any,\n      component: RendererType2,\n      doc: Document,\n      ngZone: NgZone,\n      nonce: string|null,\n      platformIsServer: boolean,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = shimStylesContent(component.id, component.styles);\n\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n\n      if (nonce) {\n        styleEl.setAttribute('nonce', nonce);\n      }\n\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  override appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  override insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  override removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  override parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n\n  override destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n}\n\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  private readonly styles: string[];\n\n  constructor(\n      eventManager: EventManager,\n      private readonly sharedStylesHost: SharedStylesHost,\n      component: RendererType2,\n      private removeStylesOnCompDestroy: boolean,\n      doc: Document,\n      ngZone: NgZone,\n      platformIsServer: boolean,\n      compId?: string,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.styles = compId ? shimStylesContent(compId, component.styles) : component.styles;\n  }\n\n  applyStyles(): void {\n    this.sharedStylesHost.addStyles(this.styles);\n  }\n\n  override destroy(): void {\n    if (!this.removeStylesOnCompDestroy) {\n      return;\n    }\n\n    this.sharedStylesHost.removeStyles(this.styles);\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: SharedStylesHost, component: RendererType2,\n      appId: string, removeStylesOnCompDestroy: boolean, doc: Document, ngZone: NgZone,\n      platformIsServer: boolean) {\n    const compId = appId + '-' + component.id;\n    super(\n        eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone,\n        platformIsServer, compId);\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n\n  applyToHost(element: any): void {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n\n  override createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, handler as EventListener, false);\n    return () => this.removeEventListener(element, eventName, handler as EventListener);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    return target.removeEventListener(eventName, callback as EventListener);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap: {[k: string]: string} = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  override supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n  static parseEventName(eventName: string): {fullKey: string, domEventName: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string, domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n  static matchEventFullKeyCode(event: KeyboardEvent, fullKeyCode: string): boolean {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    }\n    // the keycode could be unidentified so we have to check here\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n    if (keycode === ' ') {\n      keycode = 'space';  // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: string, handler: Function, zone: NgZone): Function {\n    return (event: KeyboardEvent) => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    return keyName === 'esc' ? 'escape' : keyName;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, DOCUMENT, XhrFactory, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationConfig as ApplicationConfigFromCore, ApplicationModule, ApplicationRef, createPlatformFactory, ErrorHandler, Inject, InjectionToken, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, platformCore, PlatformRef, Provider, RendererFactory2, SkipSelf, StaticProvider, Testability, TestabilityRegistry, Type, ɵINJECTOR_SCOPE as INJECTOR_SCOPE, ɵinternalCreateApplication as internalCreateApplication, ɵRuntimeError as RuntimeError, ɵsetDocument, ɵTESTABILITY as TESTABILITY, ɵTESTABILITY_GETTER as TESTABILITY_GETTER} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserGetTestability} from './browser/testability';\nimport {BrowserXhr} from './browser/xhr';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {SharedStylesHost} from './dom/shared_styles_host';\nimport {RuntimeErrorCode} from './errors';\n\n\n/**\n * Set of config options available during the application bootstrap operation.\n *\n * @publicApi\n *\n * @deprecated\n * `ApplicationConfig` has moved, please import `ApplicationConfig` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\ntype ApplicationConfig = ApplicationConfigFromCore;\nexport {ApplicationConfig};\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function bootstrapApplication(\n    rootComponent: Type<unknown>, options?: ApplicationConfig): Promise<ApplicationRef> {\n  return internalCreateApplication({rootComponent, ...createProvidersConfig(options)});\n}\n\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function createApplication(options?: ApplicationConfig) {\n  return internalCreateApplication(createProvidersConfig(options));\n}\n\nfunction createProvidersConfig(options?: ApplicationConfig) {\n  return {\n    appProviders: [\n      ...BROWSER_MODULE_PROVIDERS,\n      ...(options?.providers ?? []),\n    ],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n  };\n}\n\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nexport function provideProtractorTestingSupport(): Provider[] {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(\n    (typeof ngDevMode === 'undefined' || ngDevMode) ? 'BrowserModule Providers Marker' : '');\n\nconst TESTABILITY_PROVIDERS = [\n  {\n    provide: TESTABILITY_GETTER,\n    useClass: BrowserGetTestability,\n    deps: [],\n  },\n  {\n    provide: TESTABILITY,\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  },\n  {\n    provide: Testability,  // Also provide as `Testability` for backwards-compatibility.\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  }\n];\n\nconst BROWSER_MODULE_PROVIDERS: Provider[] = [\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []}, {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  DomRendererFactory2, SharedStylesHost, EventManager,\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: XhrFactory, useClass: BrowserXhr, deps: []},\n  (typeof ngDevMode === 'undefined' || ngDevMode) ?\n      {provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true} :\n      []\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n  exports: [CommonModule, ApplicationModule],\n})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BROWSER_MODULE_PROVIDERS_MARKER)\n              providersAlreadyPresent: boolean|null) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && providersAlreadyPresent) {\n      throw new RuntimeError(\n          RuntimeErrorCode.BROWSER_MODULE_ALREADY_LOADED,\n          `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` +\n              `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   *\n   * @deprecated Use {@link APP_ID} instead to set the application ID.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n      ],\n    };\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵDomAdapter as DomAdapter, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n/**\n * Represents the attributes of an HTML `<meta>` element. The element itself is\n * represented by the internal `HTMLMetaElement`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see {@link Meta}\n *\n * @publicApi\n */\nexport type MetaDefinition = {\n  charset?: string;\n  content?: string;\n  httpEquiv?: string;\n  id?: string;\n  itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n}&{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\nexport function createMeta() {\n  return new Meta(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    this._dom = getDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector)!;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n  removeTag(attrSelector: string): void {\n    this.removeTagElement(this.getTag(attrSelector)!);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n      if (elem !== undefined) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._doc.getElementsByTagName('head')[0];\n    head.appendChild(element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach(\n        (prop: string) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every(\n        (key: string) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n  }\n\n  private _getMetaKeyMap(prop: string): string {\n    return META_KEYS_MAP[prop] || prop;\n  }\n}\n\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP: {[prop: string]: string;} = {\n  httpEquiv: 'http-equiv'\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n\n/**\n * Factory to create Title service.\n */\nexport function createTitle() {\n  return new Title(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createTitle, deps: []})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵglobal as global} from '@angular/core';\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as {[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst win = typeof window !== 'undefined' && window || <any>{};\nexport {win as window};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\n\nimport {window} from './browser';\n\nexport class ChangeDetectionPerfRecord {\n  constructor(public msPerTick: number, public numTicks: number) {}\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    const isProfilerAvailable = window.console.profile != null;\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const start = performanceNow();\n    let numTicks = 0;\n    while (numTicks < 5 || (performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performanceNow();\n    if (record && isProfilerAvailable) {\n      window.console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n\nfunction performanceNow() {\n  return window.performance && window.performance.now ? window.performance.now() :\n                                                        new Date().getTime();\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\nimport {exportNgVar} from '../../dom/util';\nimport {AngularProfiler} from './common_tools';\n\nconst PROFILER_GLOBAL_NAME = 'profiler';\n\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T> {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport function disableDebugTools(): void {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {DebugElement, DebugNode, Predicate, Type} from '@angular/core';\n\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugNode> {\n    return () => true;\n  }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null ?\n          elementMatches(debugElement.nativeElement, selector) :\n          false;\n    };\n  }\n\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugNode> {\n    return (debugNode) => debugNode.providerTokens!.indexOf(type) !== -1;\n  }\n}\n\nfunction elementMatches(n: any, selector: string): boolean {\n  if (getDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) ||\n        n.msMatchesSelector && n.msMatchesSelector(selector) ||\n        n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n\n  return false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgModule, Optional, Provider, ɵConsole as Console} from '@angular/core';\n\nimport {EVENT_MANAGER_PLUGINS, EventManagerPlugin} from './event_manager';\n\n\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see {@link HammerGestureConfig}\n *\n * @ngModule HammerModule\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   *\n   * The key is a supported event name to be configured,\n   * and the options object contains a set of properties, with override values\n   * to be applied to the named recognizer event.\n   * For example, to disable recognition of the rotate event, specify\n   *  `{\"rotate\": {\"enable\": false}}`.\n   *\n   * Properties that are not present take the HammerJS default values.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   *\n   */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer!(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  private _loaderPromise: Promise<void>|null = null;\n\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  override supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        this.console.warn(\n            `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n            `loaded and no custom loader has been specified.`);\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader!());\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => {\n        cancelRegistration = true;\n      };\n\n      zone.runOutsideAngular(\n          () => this._loaderPromise!\n                    .then(() => {\n                      // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                      if (!(window as any).Hammer) {\n                        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                          this.console.warn(\n                              `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n                        }\n                        deregister = () => {};\n                        return;\n                      }\n\n                      if (!cancelRegistration) {\n                        // Now that Hammer is loaded and the listener is being loaded for real,\n                        // the deregistration function changes from canceling registration to\n                        // removal.\n                        deregister = this.addEventListener(element, eventName, handler);\n                      }\n                    })\n                    .catch(() => {\n                      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                        this.console.warn(\n                            `The \"${eventName}\" event cannot be bound because the custom ` +\n                            `Hammer.JS loader failed.`);\n                      }\n                      deregister = () => {};\n                    }));\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n}\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's `EventManager`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    {\n      provide: EVENT_MANAGER_PLUGINS,\n      useClass: HammerGesturesPlugin,\n      multi: true,\n      deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n    },\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n  ]\n})\nexport class HammerModule {\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {forwardRef, Inject, Injectable, Injector, Sanitizer, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeUrl as _sanitizeUrl, ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow, ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl, ɵBypassType as BypassType, ɵRuntimeError as RuntimeError, ɵunwrapSafeValue as unwrapSafeValue, ɵXSS_SECURITY_URL as XSS_SECURITY_URL} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport {SecurityContext};\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Gets a safe value from either a known safe value or a value with unknown safety.\n   *\n   * If the given value is already a `SafeValue`, this method returns the unwrapped value.\n   * If the security context is HTML and the given value is a plain string, this method\n   * sanitizes the string, removing any potentially unsafe content.\n   * For any other security context, this method throws an error if provided\n   * with a plain string.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nexport function domSanitizerImplFactory(injector: Injector) {\n  return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\n\n@Injectable({providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [Injector]})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNSAFE_SCRIPT,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNSAFE_RESOURCE_URL,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n      default:\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNEXPECTED_CTX,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`);\n    }\n  }\n\n  override bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  override bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  override bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  override bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  override bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpTransferCacheOptions, ɵwithHttpTransferCache} from '@angular/common/http';\nimport {ENVIRONMENT_INITIALIZER, EnvironmentProviders, inject, makeEnvironmentProviders, NgZone, Provider, ɵConsole as Console, ɵformatRuntimeError as formatRuntimeError, ɵwithDomHydration as withDomHydration,} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * The list of features as an enum to uniquely type each `HydrationFeature`.\n * @see {@link HydrationFeature}\n *\n * @publicApi\n */\nexport const enum HydrationFeatureKind {\n  NoHttpTransferCache,\n  HttpTransferCacheOptions,\n}\n\n/**\n * Helper type to represent a Hydration feature.\n *\n * @publicApi\n */\nexport interface HydrationFeature<FeatureKind extends HydrationFeatureKind> {\n  ɵkind: FeatureKind;\n  ɵproviders: Provider[];\n}\n\n/**\n * Helper function to create an object that represents a Hydration feature.\n */\nfunction hydrationFeature<FeatureKind extends HydrationFeatureKind>(\n    ɵkind: FeatureKind, ɵproviders: Provider[] = [],\n    ɵoptions: unknown = {}): HydrationFeature<FeatureKind> {\n  return {ɵkind, ɵproviders};\n}\n\n/**\n * Disables HTTP transfer cache. Effectively causes HTTP requests to be performed twice: once on the\n * server and other one on the browser.\n *\n * @publicApi\n */\nexport function withNoHttpTransferCache():\n    HydrationFeature<HydrationFeatureKind.NoHttpTransferCache> {\n  // This feature has no providers and acts as a flag that turns off\n  // HTTP transfer cache (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoHttpTransferCache);\n}\n\n/**\n * The function accepts a an object, which allows to configure cache parameters,\n * such as which headers should be included (no headers are included by default),\n * wether POST requests should be cached or a callback function to determine if a\n * particular request should be cached.\n *\n * @publicApi\n */\nexport function withHttpTransferCacheOptions(\n    options: HttpTransferCacheOptions,\n    ): HydrationFeature<HydrationFeatureKind.HttpTransferCacheOptions> {\n  // This feature has no providers and acts as a flag to pass options to the HTTP transfer cache.\n  return hydrationFeature(\n      HydrationFeatureKind.HttpTransferCacheOptions, ɵwithHttpTransferCache(options));\n}\n\n/**\n * Returns an `ENVIRONMENT_INITIALIZER` token setup with a function\n * that verifies whether compatible ZoneJS was used in an application\n * and logs a warning in a console if it's not the case.\n */\nfunction provideZoneJsCompatibilityDetector(): Provider[] {\n  return [{\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      const ngZone = inject(NgZone);\n      // Checking `ngZone instanceof NgZone` would be insufficient here,\n      // because custom implementations might use NgZone as a base class.\n      if (ngZone.constructor !== NgZone) {\n        const console = inject(Console);\n        const message = formatRuntimeError(\n            RuntimeErrorCode.UNSUPPORTED_ZONEJS_INSTANCE,\n            'Angular detected that hydration was enabled for an application ' +\n                'that uses a custom or a noop Zone.js implementation. ' +\n                'This is not yet a fully supported configuration.');\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n      }\n    },\n    multi: true,\n  }];\n}\n\n/**\n * Sets up providers necessary to enable hydration functionality for the application.\n *\n * By default, the function enables the recommended set of features for the optimal\n * performance for most of the applications. It includes the following features:\n *\n * * Reconciling DOM hydration. Learn more about it [here](guide/hydration).\n * * [`HttpClient`](api/common/http/HttpClient) response caching while running on the server and\n * transferring this cache to the client to avoid extra HTTP requests. Learn more about data caching\n * [here](/guide/ssr#caching-data-when-using-httpclient).\n *\n * These functions allow you to disable some of the default features or configure features\n * * {@link withNoHttpTransferCache} to disable HTTP transfer cache\n * * {@link withHttpTransferCacheOptions} to configure some HTTP transfer cache options\n *\n * @usageNotes\n *\n * Basic example of how you can enable hydration in your application when\n * `bootstrapApplication` function is used:\n * ```\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration()]\n * });\n * ```\n *\n * Alternatively if you are using NgModules, you would add `provideClientHydration`\n * to your root app module's provider list.\n * ```\n * @NgModule({\n *   declarations: [RootCmp],\n *   bootstrap: [RootCmp],\n *   providers: [provideClientHydration()],\n * })\n * export class AppModule {}\n * ```\n *\n * @see {@link withNoHttpTransferCache}\n * @see {@link withHttpTransferCacheOptions}\n *\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to enable hydration.\n *\n * @publicApi\n */\nexport function provideClientHydration(...features: HydrationFeature<HydrationFeatureKind>[]):\n    EnvironmentProviders {\n  const providers: Provider[] = [];\n  const featuresKind = new Set<HydrationFeatureKind>();\n  const hasHttpTransferCacheOptions =\n      featuresKind.has(HydrationFeatureKind.HttpTransferCacheOptions);\n\n  for (const {ɵproviders, ɵkind} of features) {\n    featuresKind.add(ɵkind);\n\n    if (ɵproviders.length) {\n      providers.push(ɵproviders);\n    }\n  }\n\n  if (typeof ngDevMode !== 'undefined' && ngDevMode &&\n      featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) && hasHttpTransferCacheOptions) {\n    // TODO: Make this a runtime error\n    throw new Error(\n        'Configuration error: found both withHttpTransferCacheOptions() and withNoHttpTransferCache() in the same call to provideClientHydration(), which is a contradiction.');\n  }\n\n  return makeEnvironmentProviders([\n    (typeof ngDevMode !== 'undefined' && ngDevMode) ? provideZoneJsCompatibilityDetector() : [],\n    withDomHydration(),\n    ((featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) || hasHttpTransferCacheOptions) ?\n         [] :\n         ɵwithHttpTransferCache({})),\n    providers,\n  ]);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('17.0.3');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Re-export TransferState to the public API of the `platform-browser` for backwards-compatibility.\nimport {makeStateKey as makeStateKeyFromCore, StateKey as StateKeyFromCore, TransferState as TransferStateFromCore} from '@angular/core';\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n * @deprecated `makeStateKey` has moved, please import `makeStateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nexport const makeStateKey = makeStateKeyFromCore;\n\n/**\n *\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n *\n * @deprecated `TransferState` has moved, please import `TransferState` from `@angular/core`\n *     instead.\n */\n// The below is a workaround to add a deprecated message.\nexport type TransferState = TransferStateFromCore;\n// The below type is needed for G3 due to JSC_CONFORMANCE_VIOLATION.\nexport const TransferState: {new (): TransferStateFromCore} = TransferStateFromCore;\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n * @publicApi\n *\n * @deprecated `StateKey` has moved, please import `StateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nexport type StateKey<T> = StateKeyFromCore<T>;\n\nexport {ApplicationConfig, bootstrapApplication, BrowserModule, createApplication, platformBrowser, provideProtractorTestingSupport} from './browser';\nexport {Meta, MetaDefinition} from './browser/meta';\nexport {Title} from './browser/title';\nexport {disableDebugTools, enableDebugTools} from './browser/tools/tools';\nexport {By} from './dom/debug/by';\nexport {REMOVE_STYLES_ON_COMPONENT_DESTROY} from './dom/dom_renderer';\nexport {EVENT_MANAGER_PLUGINS, EventManager, EventManagerPlugin} from './dom/events/event_manager';\nexport {HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerLoader, HammerModule} from './dom/events/hammer_gestures';\nexport {DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl, SafeValue} from './security/dom_sanitization_service';\nexport {HydrationFeature, provideClientHydration, HydrationFeatureKind, withHttpTransferCacheOptions, withNoHttpTransferCache} from './hydration';\n\nexport * from './private_export';\nexport {VERSION} from './version';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/platform-browser';\n// This file only reexports content of the `src` folder. Keep it that way.\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["HttpHandler", "HttpBackend", "HttpHeaders", "constructor", "headers", "normalizedNames", "Map", "lazyUpdate", "lazyInit", "split", "forEach", "line", "index", "indexOf", "name", "slice", "key", "toLowerCase", "value", "trim", "maybeSetNormalizedName", "has", "get", "push", "set", "Headers", "values", "setHeaderEntries", "ngDevMode", "assertValidHeaders", "Object", "entries", "init", "length", "keys", "Array", "from", "getAll", "append", "clone", "op", "delete", "lcName", "copyFrom", "update", "applyUpdate", "other", "concat", "base", "undefined", "toDelete", "existing", "filter", "headerValues", "isArray", "map", "toString", "fn", "Error", "HttpUrlEncodingCodec", "encodeKey", "standardEncoding", "encodeValue", "decodeKey", "decodeURIComponent", "decodeValue", "paramParser", "rawParams", "codec", "params", "replace", "param", "eqIdx", "val", "list", "STANDARD_ENCODING_REGEX", "STANDARD_ENCODING_REPLACEMENTS", "v", "encodeURIComponent", "s", "t", "valueToString", "HttpParams", "options", "updates", "cloneFrom", "encoder", "fromString", "fromObject", "res", "appendAll", "_value", "eKey", "join", "idx", "splice", "HttpContext", "constructor", "map", "Map", "set", "token", "value", "get", "has", "defaultValue", "delete", "keys", "mightHaveBody", "method", "isArrayBuffer", "ArrayBuffer", "isBlob", "Blob", "isFormData", "FormData", "isUrlSearchParams", "URLSearchParams", "HttpRequest", "url", "third", "fourth", "body", "reportProgress", "withCredentials", "responseType", "toUpperCase", "options", "undefined", "headers", "context", "params", "transferCache", "HttpHeaders", "HttpParams", "urlWithParams", "toString", "length", "qIdx", "indexOf", "sep", "serializeBody", "Array", "isArray", "JSON", "stringify", "detectContentTypeHeader", "type", "clone", "update", "setHeaders", "Object", "reduce", "name", "setParams", "param", "HttpEventType", "HttpResponseBase", "init", "defaultStatus", "defaultStatusText", "status", "statusText", "ok", "HttpHeaderResponse", "ResponseHeader", "HttpResponse", "Response", "HttpErrorResponse", "message", "error", "addBody", "observe", "HttpClient", "handler", "request", "first", "req", "fromObject", "events$", "of", "pipe", "concatMap", "handle", "res$", "filter", "event", "res", "Error", "head", "jsonp", "callbackParam", "append", "patch", "post", "put", "HttpHandler", "Injectable", "XSSI_PREFIX$1", "REQUEST_URL_HEADER", "getResponseUrl$1", "response", "xRequestUrl", "toLocaleLowerCase", "FetchBackend", "fetchImpl", "inject", "FetchFactory", "optional", "fetch", "bind", "globalThis", "ngZone", "NgZone", "Observable", "observer", "aborter", "AbortController", "doRequest", "signal", "then", "noop", "abort", "createRequestInit", "fetchPromise", "silenceSuperfluousUnhandledPromiseRejection", "next", "Sent", "contentLength", "chunks", "reader", "getReader", "receivedLength", "decoder", "partialText", "reqZone", "Zone", "current", "runOutsideAngular", "done", "read", "push", "TextDecoder", "decode", "stream", "DownloadProgress", "total", "loaded", "run", "chunksAll", "concatChunks", "contentType", "parseBody", "complete", "binContent", "text", "replace", "parse", "buffer", "credentials", "forEach", "values", "join", "detectedType", "totalLength", "Uint8Array", "position", "chunk", "factory", "ɵfac", "promise", "interceptorChainEndFn", "finalHandlerFn", "adaptLegacyInterceptorToChain", "chainTailFn", "interceptor", "initialRequest", "intercept", "downstreamRequest", "chainedInterceptorFn", "interceptorFn", "injector", "runInContext", "HTTP_INTERCEPTORS", "InjectionToken", "ngDevMode", "HTTP_INTERCEPTOR_FNS", "HTTP_ROOT_INTERCEPTOR_FNS", "PRIMARY_HTTP_BACKEND", "legacyInterceptorFnFactory", "chain", "interceptors", "reduceRight", "pendingTasks", "ɵInitialRenderPendingTasks", "taskId", "add", "finalize", "remove", "fetchBackendWarningDisplayed", "HttpInterceptorHandler", "HttpHandler", "constructor", "backend", "injector", "chain", "pendingTasks", "inject", "ɵInitialRenderPendingTasks", "primaryHttpBackend", "PRIMARY_HTTP_BACKEND", "optional", "ngDevMode", "fetchBackendWarningDisplayed", "isServer", "isPlatformServer", "get", "PLATFORM_ID", "FetchBackend", "ɵConsole", "warn", "ɵformatRuntimeError", "handle", "initialRequest", "dedupedInterceptorFns", "Array", "from", "Set", "HTTP_INTERCEPTOR_FNS", "HTTP_ROOT_INTERCEPTOR_FNS", "reduceRight", "nextSequencedFn", "interceptorFn", "chainedInterceptorFn", "interceptorChainEndFn", "taskId", "add", "downstreamRequest", "pipe", "finalize", "remove", "HttpBackend", "EnvironmentInjector", "factory", "ɵfac", "Injectable", "nextRequestId", "foreignDocument", "JSONP_ERR_NO_CALLBACK", "JSONP_ERR_WRONG_METHOD", "JSONP_ERR_WRONG_RESPONSE_TYPE", "JSONP_ERR_HEADERS_NOT_SUPPORTED", "JsonpCallbackContext", "jsonpCallbackContext", "window", "JsonpClientBackend", "callbackMap", "document", "resolvedPromise", "Promise", "resolve", "nextCallback", "req", "method", "Error", "responseType", "headers", "keys", "length", "Observable", "observer", "callback", "url", "urlWithParams", "replace", "node", "createElement", "src", "body", "finished", "data", "cleanup", "parentNode", "removeChild", "onLoad", "event", "then", "error", "HttpErrorResponse", "status", "statusText", "next", "HttpResponse", "complete", "onError", "addEventListener", "appendChild", "type", "HttpEventType", "Sent", "removeListeners", "script", "implementation", "createHTMLDocument", "adoptNode", "JsonpClientBackend_Factory", "t", "DOCUMENT", "Inject", "jsonpInterceptorFn", "JsonpInterceptor", "intercept", "runInContext", "XSSI_PREFIX", "getResponseUrl", "xhr", "responseURL", "test", "getAllResponseHeaders", "getResponseHeader", "HttpXhrBackend", "xhrFactory", "ɵRuntimeError", "source", "ɵloadImpl", "of", "switchMap", "build", "open", "withCredentials", "forEach", "name", "values", "setRequestHeader", "join", "has", "detectedType", "detectContentTypeHeader", "toLowerCase", "reqBody", "serializeBody", "headerResponse", "partialFromXhr", "HttpHeaders", "HttpHeaderResponse", "response", "responseText", "ok", "originalBody", "JSON", "parse", "text", "undefined", "res", "sentHeaders", "onDownProgress", "progressEvent", "DownloadProgress", "loaded", "lengthComputable", "total", "partialText", "onUpProgress", "progress", "UploadProgress", "reportProgress", "upload", "send", "removeEventListener", "readyState", "DONE", "abort", "XhrFactory", "XSRF_ENABLED", "InjectionToken", "XSRF_DEFAULT_COOKIE_NAME", "XSRF_COOKIE_NAME", "providedIn", "XSRF_DEFAULT_HEADER_NAME", "XSRF_HEADER_NAME", "HttpXsrfTokenExtractor", "HttpXsrfCookieExtractor", "doc", "platform", "cookieName", "lastCookieString", "lastToken", "parseCount", "getToken", "cookieString", "cookie", "ɵparseCookieValue", "HttpXsrfCookieExtractor_Factory", "xsrfInterceptorFn", "lcUrl", "startsWith", "token", "headerName", "clone", "set", "HttpXsrfInterceptor", "HttpFeatureKind", "makeHttpFeature", "kind", "providers", "ɵkind", "ɵproviders", "provideHttpClient", "features", "featureKinds", "map", "f", "NoXsrfProtection", "CustomXsrfConfiguration", "HttpClient", "provide", "useExisting", "useValue", "multi", "useClass", "feature", "push", "makeEnvironmentProviders", "LEGACY_INTERCEPTOR_FN", "InjectionToken", "withInterceptorsFromDi", "makeHttpFeature", "HttpFeatureKind", "LegacyInterceptors", "provide", "useFactory", "legacyInterceptorFnFactory", "HTTP_INTERCEPTOR_FNS", "useExisting", "multi", "withXsrfConfiguration", "cookieName", "headerName", "providers", "undefined", "push", "XSRF_COOKIE_NAME", "useValue", "XSRF_HEADER_NAME", "CustomXsrfConfiguration", "withNoXsrfProtection", "NoXsrfProtection", "XSRF_ENABLED", "withJsonpSupport", "JsonpSupport", "JsonpClientBackend", "JsonpCallbackContext", "jsonpCallbackContext", "jsonpInterceptorFn", "HttpClientXsrfModule", "disable", "ngModule", "providers", "withNoXsrfProtection", "ɵproviders", "withOptions", "options", "withXsrfConfiguration", "ɵinj", "HttpXsrfInterceptor", "provide", "HTTP_INTERCEPTORS", "useExisting", "multi", "HttpXsrfTokenExtractor", "useClass", "HttpXsrfCookieExtractor", "cookieName", "XSRF_DEFAULT_COOKIE_NAME", "headerName", "XSRF_DEFAULT_HEADER_NAME", "XSRF_ENABLED", "useValue", "NgModule", "args", "HttpClientModule", "provideHttpClient", "withInterceptorsFromDi", "HttpClientJsonpModule", "withJsonpSupport", "BODY", "HEADERS", "STATUS", "STATUS_TEXT", "URL", "RESPONSE_TYPE", "CACHE_OPTIONS", "InjectionToken", "ngDevMode", "ALLOWED_METHODS", "transferCacheInterceptorFn", "req", "next", "inject", "isCacheActive", "globalOptions", "transferCache", "requestOptions", "method", "requestMethod", "includePostRequests", "includes", "filter", "transferState", "TransferState", "storeKey", "makeCacheKey", "response", "get", "headersToInclude", "includeHeaders", "undecodedBody", "responseType", "httpHeaders", "status", "statusText", "url", "body", "TextEncoder", "encode", "buffer", "Blob", "headers", "HttpHeaders", "appendMissingHeadersDetection", "of", "HttpResponse", "pipe", "tap", "event", "set", "getFilteredHeaders", "headersMap", "key", "values", "getAll", "request", "params", "encodedParams", "keys", "sort", "map", "k", "join", "hash", "generateHash", "makeStateKey", "value", "char", "Math", "imul", "charCodeAt", "toString", "withHttpTransferCache", "cacheOptions", "useFactory", "ɵperformanceMarkFeature", "HTTP_ROOT_INTERCEPTOR_FNS", "deps", "APP_BOOTSTRAP_LISTENER", "appRef", "ApplicationRef", "cacheState", "ɵwhenStable", "then", "warningProduced", "Set", "Proxy", "target", "prop", "Reflect", "methods", "has", "toLowerCase", "add", "truncatedUrl", "ɵtruncateMiddle", "console", "warn", "ɵformatRuntimeError", "apply", "GenericBrowserDomAdapter", "ɵDomAdapter", "constructor", "supportsDOMEvents", "BrowserDomAdapter", "makeCurrent", "ɵsetRootDomAdapter", "onAndCancel", "el", "evt", "listener", "addEventListener", "removeEventListener", "dispatchEvent", "remove", "node", "parentNode", "removeChild", "createElement", "tagName", "doc", "getDefaultDocument", "createHtmlDocument", "document", "implementation", "createHTMLDocument", "isElementNode", "nodeType", "Node", "ELEMENT_NODE", "isShadowRoot", "DocumentFragment", "getGlobalEventTarget", "target", "window", "body", "getBaseHref", "href", "getBaseElementHref", "relativePath", "resetBaseElement", "baseElement", "getUserAgent", "navigator", "userAgent", "getCookie", "name", "ɵparseCookieValue", "cookie", "querySelector", "getAttribute", "urlParsingNode", "url", "setAttribute", "pathName", "pathname", "charAt", "BrowserGetTestability", "addToWindow", "registry", "ɵglobal", "elem", "findInAncestors", "testability", "findTestabilityInTree", "ɵRuntimeError", "ngDevMode", "getAllTestabilities", "getAllRootElements", "whenAllStable", "callback", "testabilities", "count", "length", "didWork", "decrement", "didWork_", "forEach", "whenStable", "push", "t", "getTestability", "ɵgetDOM", "host", "parentElement", "BrowserXhr", "build", "XMLHttpRequest", "Injectable", "EVENT_MANAGER_PLUGINS", "InjectionToken", "EventManager", "plugins", "_zone", "_eventNameToPlugin", "Map", "plugin", "manager", "_plugins", "slice", "reverse", "element", "eventName", "handler", "_findPluginFor", "getZone", "get", "find", "supports", "set", "ɵfac", "EventManager_Factory", "NgZone", "factory", "Inject", "EventManagerPlugin", "_doc", "APP_ID_ATTRIBUTE_NAME", "SharedStylesHost", "appId", "nonce", "platformId", "styleRef", "hostNodes", "Set", "styleNodesInDOM", "collectServerRenderedStyles", "platformIsServer", "isPlatformServer", "resetHostNodes", "addStyles", "styles", "style", "usageCount", "changeUsageCount", "onStyleAdded", "removeStyles", "onStyleRemoved", "ngOnDestroy", "clear", "getAllStyles", "addHost", "hostNode", "add", "addStyleToHost", "removeHost", "delete", "keys", "elements", "head", "querySelectorAll", "styleMap", "textContent", "delta", "map", "has", "styleRefValue", "usage", "getStyleElement", "styleEl", "removeAttribute", "appendChild", "styleElRef", "SharedStylesHost_Factory", "DOCUMENT", "APP_ID", "CSP_NONCE", "PLATFORM_ID", "Optional", "NAMESPACE_URIS", "COMPONENT_REGEX", "COMPONENT_VARIABLE", "HOST_ATTR", "CONTENT_ATTR", "REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT", "REMOVE_STYLES_ON_COMPONENT_DESTROY", "providedIn", "shimContentAttribute", "componentShortId", "replace", "shimHostAttribute", "shimStylesContent", "compId", "s", "DomRendererFactory2", "eventManager", "sharedStylesHost", "removeStylesOnCompDestroy", "ngZone", "rendererByCompId", "defaultRenderer", "DefaultDomRenderer2", "createRenderer", "type", "encapsulation", "ViewEncapsulation", "ShadowDom", "Emulated", "renderer", "getOrCreateRenderer", "EmulatedEncapsulationDomRenderer2", "applyToHost", "NoneEncapsulationDomRenderer", "applyStyles", "id", "ShadowDomRenderer", "data", "Object", "create", "throwOnSyntheticProps", "destroyNode", "destroy", "namespace", "createElementNS", "createComment", "value", "createText", "createTextNode", "parent", "newChild", "targetParent", "isTemplateNode", "content", "insertBefore", "refChild", "oldChild", "selectRootElement", "selectorOrNode", "preserveContent", "nextSibling", "namespaceUri", "setAttributeNS", "removeAttributeNS", "addClass", "classList", "removeClass", "setStyle", "flags", "RendererStyleFlags2", "DashCase", "Important", "setProperty", "removeStyle", "removeProperty", "checkNoSyntheticProp", "setValue", "nodeValue", "listen", "event", "Error", "decoratePreventDefault", "eventHandler", "allowDefaultBehavior", "runGuarded", "preventDefault", "undefined", "AT_CHARCODE", "charCodeAt", "nameKind", "hostEl", "component", "shadowRoot", "attachShadow", "mode", "nodeOrShadowRoot", "contentAttr", "hostAttr", "DomEventsPlugin", "DomEventsPlugin_Factory", "MODIFIER_KEYS", "_keyMap", "MODIFIER_KEY_GETTERS", "altKey", "ctrlKey", "metaKey", "shiftKey", "KeyEventsPlugin", "parseEventName", "parsedEvent", "outsideHandler", "eventCallback", "runOutsideAngular", "parts", "toLowerCase", "split", "domEventName", "shift", "key", "_normalizeKey", "pop", "fullKey", "codeIX", "indexOf", "splice", "modifierName", "index", "result", "matchEventFullKeyCode", "fullKeyCode", "keycode", "code", "modifierGetter", "zone", "keyName", "KeyEventsPlugin_Factory", "bootstrapApplication", "rootComponent", "options", "ɵinternalCreateApplication", "createProvidersConfig", "createApplication", "appProviders", "BROWSER_MODULE_PROVIDERS", "providers", "platformProviders", "INTERNAL_BROWSER_PLATFORM_PROVIDERS", "provideProtractorTestingSupport", "TESTABILITY_PROVIDERS", "initDomAdapter", "errorHandler", "ErrorHandler", "_document", "ɵsetDocument", "provide", "useValue", "ɵPLATFORM_BROWSER_ID", "PLATFORM_INITIALIZER", "multi", "useFactory", "deps", "platformBrowser", "createPlatformFactory", "platformCore", "BROWSER_MODULE_PROVIDERS_MARKER", "ɵTESTABILITY_GETTER", "useClass", "ɵTESTABILITY", "Testability", "TestabilityRegistry", "ɵINJECTOR_SCOPE", "RendererFactory2", "useExisting", "XhrFactory", "BrowserModule", "providersAlreadyPresent", "withServerTransition", "params", "ngModule", "BrowserModule_Factory", "exports", "CommonModule", "ApplicationModule", "imports", "NgModule", "args", "SkipSelf", "createMeta", "Meta", "ɵɵinject", "_dom", "addTag", "tag", "forceCreation", "_getOrCreateElement", "addTags", "tags", "reduce", "getTag", "attrSelector", "getTags", "list", "call", "updateTag", "selector", "_parseSelector", "meta", "_setMetaElementAttributes", "removeTag", "removeTagElement", "filter", "_containsAttributes", "getElementsByTagName", "prop", "_getMetaKeyMap", "attr", "every", "META_KEYS_MAP", "Meta_Factory", "r", "httpEquiv", "createTitle", "Title", "getTitle", "title", "setTitle", "newTitle", "Title_Factory", "exportNgVar", "COMPILED", "ng", "win", "ChangeDetectionPerfRecord", "msPerTick", "numTicks", "AngularProfiler", "ref", "appRef", "injector", "ApplicationRef", "timeChangeDetection", "config", "record", "profileName", "isProfilerAvailable", "console", "profile", "start", "performanceNow", "tick", "end", "profileEnd", "log", "toFixed", "performance", "now", "Date", "getTime", "PROFILER_GLOBAL_NAME", "enableDebugTools", "disableDebugTools", "By", "all", "css", "debugElement", "nativeElement", "elementMatches", "directive", "debugNode", "providerTokens", "n", "matches", "msMatchesSelector", "webkitMatchesSelector", "EVENT_NAMES", "HAMMER_GESTURE_CONFIG", "HAMMER_LOADER", "HammerGestureConfig", "events", "overrides", "buildHammer", "mc", "Hammer", "enable", "HammerGesturesPlugin", "_config", "loader", "_loaderPromise", "hasOwnProperty", "isCustomEvent", "warn", "cancelRegistration", "deregister", "then", "catch", "eventObj", "on", "off", "HammerGesturesPlugin_Factory", "ɵConsole", "HammerModule", "ɵinj", "DomSanitizer", "DomSanitizer_Factory", "DomSanitizerImpl", "forwardRef", "domSanitizerImplFactory", "sanitize", "ctx", "SecurityContext", "NONE", "HTML", "ɵallowSanitizationBypassAndThrow", "ɵunwrapSafeValue", "ɵ_sanitizeHtml", "String", "toString", "STYLE", "SCRIPT", "URL", "ɵ_sanitizeUrl", "RESOURCE_URL", "ɵXSS_SECURITY_URL", "bypassSecurityTrustHtml", "ɵbypassSanitizationTrustHtml", "bypassSecurityTrustStyle", "ɵbypassSanitizationTrustStyle", "bypassSecurityTrustScript", "ɵbypassSanitizationTrustScript", "bypassSecurityTrustUrl", "ɵbypassSanitizationTrustUrl", "bypassSecurityTrustResourceUrl", "ɵbypassSanitizationTrustResourceUrl", "DomSanitizerImpl_Factory", "ɵprov", "Injector", "hydrationFeature", "ɵkind", "ɵproviders", "ɵoptions", "withNoHttpTransferCache", "withHttpTransferCacheOptions", "ɵwithHttpTransferCache", "provideZoneJsCompatibilityDetector", "ENVIRONMENT_INITIALIZER", "inject", "message", "ɵformatRuntimeError", "provideClientHydration", "features", "featuresKind", "hasHttpTransferCacheOptions", "makeEnvironmentProviders", "ɵwithDomHydration", "VERSION", "Version", "makeStateKey", "makeStateKey$1", "TransferState", "TransferState$1"]
}
